name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  # Update Python dependencies
  update-dependencies:
    name: Update Python Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Update base dependencies
      run: |
        # Create .in files if they don't exist
        if [ ! -f "requirements/base.in" ]; then
          cp requirements/base.txt requirements/base.in
        fi

        # Update dependencies
        pip-compile --upgrade requirements/base.in

    - name: Update development dependencies
      run: |
        if [ ! -f "requirements/development.in" ]; then
          cp requirements/development.txt requirements/development.in
        fi
        pip-compile --upgrade requirements/development.in

    - name: Update testing dependencies
      run: |
        if [ ! -f "requirements/testing.in" ]; then
          cp requirements/testing.txt requirements/testing.in
        fi
        pip-compile --upgrade requirements/testing.in

    - name: Update production dependencies
      run: |
        if [ ! -f "requirements/production.in" ]; then
          cp requirements/production.txt requirements/production.in
        fi
        pip-compile --upgrade requirements/production.in

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Run tests with updated dependencies
      if: steps.changes.outputs.changed == 'true'
      run: |
        pip install -r requirements/testing.txt
        pytest tests/unit/ -x --tb=short

    - name: Create Pull Request
      if: steps.changes.outputs.changed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Python dependencies'
        title: 'chore: update Python dependencies'
        body: |
          ## Dependency Updates

          This PR updates Python dependencies to their latest versions.

          ### Changes
          - Updated base dependencies
          - Updated development dependencies
          - Updated testing dependencies
          - Updated production dependencies

          ### Testing
          - [x] Unit tests pass with updated dependencies
          - [ ] Integration tests (will run on PR)
          - [ ] Manual testing required

          ### Notes
          Please review the changes carefully and test thoroughly before merging.

          Auto-generated by GitHub Actions.
        branch: dependency-updates
        delete-branch: true

  # Update Docker base images
  update-docker-images:
    name: Update Docker Base Images
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for Python image updates
      id: docker-check
      run: |
        # Get current Python version from Dockerfile
        CURRENT_VERSION=$(grep "FROM python:" Dockerfile | head -1 | cut -d':' -f2 | cut -d'-' -f1)
        echo "Current Python version: $CURRENT_VERSION"

        # Check if there's a newer patch version available
        # This is a simplified check - in production you might want more sophisticated logic
        LATEST_PATCH=$(curl -s "https://registry.hub.docker.com/v2/repositories/library/python/tags/?page_size=100" | \
          jq -r '.results[].name' | grep "^${CURRENT_VERSION%.*}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | \
          sort -V | tail -1)

        echo "Latest patch version: $LATEST_PATCH"

        if [ "$CURRENT_VERSION" != "$LATEST_PATCH" ] && [ -n "$LATEST_PATCH" ]; then
          echo "update_needed=true" >> $GITHUB_OUTPUT
          echo "new_version=$LATEST_PATCH" >> $GITHUB_OUTPUT
        else
          echo "update_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Update Dockerfile
      if: steps.docker-check.outputs.update_needed == 'true'
      run: |
        NEW_VERSION="${{ steps.docker-check.outputs.new_version }}"
        sed -i "s/FROM python:[0-9]\+\.[0-9]\+\.[0-9]\+-slim/FROM python:${NEW_VERSION}-slim/g" Dockerfile
        sed -i "s/FROM python:[0-9]\+\.[0-9]\+\.[0-9]\+-slim/FROM python:${NEW_VERSION}-slim/g" Dockerfile.dev

    - name: Test Docker build
      if: steps.docker-check.outputs.update_needed == 'true'
      run: |
        docker build -t flask-api-template:test .

    - name: Create Pull Request for Docker updates
      if: steps.docker-check.outputs.update_needed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Python Docker base image to ${{ steps.docker-check.outputs.new_version }}'
        title: 'chore: update Python Docker base image'
        body: |
          ## Docker Base Image Update

          This PR updates the Python Docker base image to version `${{ steps.docker-check.outputs.new_version }}`.

          ### Changes
          - Updated Dockerfile Python base image
          - Updated Dockerfile.dev Python base image

          ### Testing
          - [x] Docker build succeeds
          - [ ] Integration tests (will run on PR)
          - [ ] Manual testing required

          ### Security
          This update may include security patches and bug fixes.

          Auto-generated by GitHub Actions.
        branch: docker-image-updates
        delete-branch: true
