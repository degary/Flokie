name: Pipeline Testing

on:
  schedule:
    # Test pipelines weekly
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of pipeline test'
        required: true
        type: choice
        options:
        - full
        - ci-only
        - cd-only
        - rollback-only
      environment:
        description: 'Test environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - acceptance

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test CI pipeline
  test-ci-pipeline:
    name: Test CI Pipeline
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'ci-only' || github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test branch
      run: |
        TEST_BRANCH="pipeline-test-$(date +%s)"
        echo "test_branch=$TEST_BRANCH" >> $GITHUB_ENV

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout -b "$TEST_BRANCH"

        # Make a small change to trigger CI
        echo "# Pipeline test $(date)" >> README.md
        git add README.md
        git commit -m "test: pipeline test commit"
        git push origin "$TEST_BRANCH"

    - name: Trigger CI workflow
      uses: actions/github-script@v6
      with:
        script: |
          const { data: workflow } = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci.yml',
            ref: process.env.test_branch
          });

          console.log('CI workflow triggered');

    - name: Wait for CI completion
      uses: actions/github-script@v6
      with:
        script: |
          const branch = process.env.test_branch;
          let completed = false;
          let attempts = 0;
          const maxAttempts = 30; // 15 minutes max

          while (!completed && attempts < maxAttempts) {
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              branch: branch,
              per_page: 1
            });

            if (runs.workflow_runs.length > 0) {
              const run = runs.workflow_runs[0];
              console.log(`CI run status: ${run.status} - ${run.conclusion}`);

              if (run.status === 'completed') {
                completed = true;
                if (run.conclusion !== 'success') {
                  throw new Error(`CI pipeline failed: ${run.conclusion}`);
                }
              }
            }

            if (!completed) {
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
              attempts++;
            }
          }

          if (!completed) {
            throw new Error('CI pipeline test timed out');
          }

          console.log('✅ CI pipeline test passed');

    - name: Cleanup test branch
      if: always()
      run: |
        git push origin --delete "$test_branch" || true

  # Test CD pipeline
  test-cd-pipeline:
    name: Test CD Pipeline
    runs-on: ubuntu-latest
    needs: [test-ci-pipeline]
    if: always() && (github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'cd-only' || github.event_name == 'schedule')
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test image
      run: |
        TEST_TAG="pipeline-test-$(date +%s)"
        echo "test_tag=$TEST_TAG" >> $GITHUB_ENV

        docker build -t "$REGISTRY/$IMAGE_NAME:$TEST_TAG" .

    - name: Test deployment simulation
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"

        echo "🧪 Simulating deployment to $ENVIRONMENT"
        echo "Test image: $REGISTRY/$IMAGE_NAME:$test_tag"

        # Simulate deployment steps
        echo "1. Pre-deployment checks..."
        sleep 5

        echo "2. Deployment execution..."
        sleep 10

        echo "3. Post-deployment verification..."
        sleep 5

        echo "✅ CD pipeline simulation completed"

    - name: Test health checks
      run: |
        echo "🔍 Testing health check mechanisms..."

        # Test health check script
        if [[ -f "docker/healthcheck.sh" ]]; then
          chmod +x docker/healthcheck.sh
          echo "Health check script found and executable"
        fi

        # Test monitoring script
        if [[ -f "scripts/monitor_deployment.sh" ]]; then
          echo "Monitoring script found"
          # Run a short monitoring test
          timeout 60 ./scripts/monitor_deployment.sh -e development -d 30 -i 10 || true
        fi

        echo "✅ Health check tests completed"

  # Test rollback mechanism
  test-rollback:
    name: Test Rollback Mechanism
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'rollback-only' || github.event_name == 'schedule'
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test rollback script
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"

        echo "🧪 Testing rollback mechanism for $ENVIRONMENT"

        # Test rollback script with dry-run
        if [[ -f "scripts/rollback.sh" ]]; then
          chmod +x scripts/rollback.sh

          echo "Testing rollback script dry-run..."
          ./scripts/rollback.sh -e "$ENVIRONMENT" -t previous -d || true

          echo "✅ Rollback script test completed"
        else
          echo "❌ Rollback script not found"
          exit 1
        fi

    - name: Test backup mechanisms
      run: |
        echo "🧪 Testing backup mechanisms..."

        # Create test backup directory
        mkdir -p .deployment-backup

        # Simulate backup creation
        echo "test-backup-$(date +%s)" > ".deployment-backup/development"

        # Test backup restoration simulation
        if [[ -f ".deployment-backup/development" ]]; then
          echo "✅ Backup mechanism test passed"
        else
          echo "❌ Backup mechanism test failed"
          exit 1
        fi

  # Test security scanning
  test-security-scanning:
    name: Test Security Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full' || github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test dependency scanning
      run: |
        echo "🧪 Testing dependency security scanning..."

        # Install security tools
        pip install safety bandit

        # Test safety check
        echo "Running safety check..."
        safety check --json || echo "Safety check completed with warnings"

        # Test bandit scan
        echo "Running bandit scan..."
        bandit -r app/ -f json || echo "Bandit scan completed with warnings"

        echo "✅ Security scanning tests completed"

    - name: Test container scanning
      run: |
        echo "🧪 Testing container security scanning..."

        # Build test image
        docker build -t test-security-scan .

        # Install Trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

        # Run Trivy scan
        trivy image --exit-code 0 --severity HIGH,CRITICAL test-security-scan || echo "Container scan completed with warnings"

        echo "✅ Container security scanning tests completed"

  # Test notification systems
  test-notifications:
    name: Test Notification Systems
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full' || github.event_name == 'schedule'

    steps:
    - name: Test Slack notifications
      run: |
        echo "🧪 Testing Slack notification system..."

        if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🧪 Pipeline test notification - Slack integration working"}' \
            "$SLACK_WEBHOOK_URL" || echo "Slack notification test failed"
          echo "✅ Slack notification test completed"
        else
          echo "⚠️ Slack webhook not configured - skipping test"
        fi

    - name: Test email notifications
      run: |
        echo "🧪 Testing email notification system..."

        if command -v mail >/dev/null 2>&1; then
          echo "Pipeline test notification" | mail -s "Pipeline Test" "test@example.com" || echo "Email test failed"
          echo "✅ Email notification test completed"
        else
          echo "⚠️ Mail command not available - skipping test"
        fi

  # Generate test report
  generate-test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-ci-pipeline, test-cd-pipeline, test-rollback, test-security-scanning, test-notifications]
    if: always()

    steps:
    - name: Generate pipeline test report
      run: |
        echo "# Pipeline Test Report" > pipeline-test-report.md
        echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> pipeline-test-report.md
        echo "Test Type: ${{ github.event.inputs.test_type || 'full' }}" >> pipeline-test-report.md
        echo "" >> pipeline-test-report.md

        echo "## Test Results" >> pipeline-test-report.md
        echo "- CI Pipeline: ${{ needs.test-ci-pipeline.result }}" >> pipeline-test-report.md
        echo "- CD Pipeline: ${{ needs.test-cd-pipeline.result }}" >> pipeline-test-report.md
        echo "- Rollback Mechanism: ${{ needs.test-rollback.result }}" >> pipeline-test-report.md
        echo "- Security Scanning: ${{ needs.test-security-scanning.result }}" >> pipeline-test-report.md
        echo "- Notifications: ${{ needs.test-notifications.result }}" >> pipeline-test-report.md
        echo "" >> pipeline-test-report.md

        # Determine overall status
        FAILED_TESTS=0

        [[ "${{ needs.test-ci-pipeline.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-cd-pipeline.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-rollback.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-security-scanning.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-notifications.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))

        if [[ $FAILED_TESTS -eq 0 ]]; then
          echo "## Overall Status: ✅ PASSED" >> pipeline-test-report.md
          echo "All pipeline tests completed successfully." >> pipeline-test-report.md
        else
          echo "## Overall Status: ❌ FAILED" >> pipeline-test-report.md
          echo "$FAILED_TESTS test(s) failed. Please review the logs above." >> pipeline-test-report.md
        fi

        echo "" >> pipeline-test-report.md
        echo "## Recommendations" >> pipeline-test-report.md

        if [[ $FAILED_TESTS -gt 0 ]]; then
          echo "- Review failed test logs and fix issues" >> pipeline-test-report.md
          echo "- Re-run tests after fixes are applied" >> pipeline-test-report.md
          echo "- Consider updating pipeline configurations" >> pipeline-test-report.md
        else
          echo "- All systems are functioning correctly" >> pipeline-test-report.md
          echo "- Continue with regular deployment operations" >> pipeline-test-report.md
          echo "- Schedule next pipeline test" >> pipeline-test-report.md
        fi

        cat pipeline-test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-test-report
        path: pipeline-test-report.md
        retention-days: 30

    - name: Send test summary
      run: |
        FAILED_TESTS=0
        [[ "${{ needs.test-ci-pipeline.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-cd-pipeline.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-rollback.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-security-scanning.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))
        [[ "${{ needs.test-notifications.result }}" == "failure" ]] && FAILED_TESTS=$((FAILED_TESTS + 1))

        if [[ $FAILED_TESTS -eq 0 ]]; then
          STATUS="✅ PASSED"
          MESSAGE="All pipeline tests completed successfully"
        else
          STATUS="❌ FAILED"
          MESSAGE="$FAILED_TESTS pipeline test(s) failed"
        fi

        NOTIFICATION="🧪 Pipeline Test Summary

        **Status:** $STATUS
        **Message:** $MESSAGE
        **Test Type:** ${{ github.event.inputs.test_type || 'full' }}
        **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

        [View Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

        echo "$NOTIFICATION"

        # Send notification if webhook is configured
        if [[ -n "${SLACK_WEBHOOK_URL:-}" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$NOTIFICATION\"}" \
            "$SLACK_WEBHOOK_URL" || true
        fi
