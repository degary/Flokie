name: Security & Dependency Updates

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - 'requirements/**'
      - 'Dockerfile'
      - '.github/workflows/security.yml'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -r requirements/base.txt

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep
        pip install -r requirements/base.txt

    - name: Run Bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json app/ || true

    - name: Upload SAST reports
      uses: actions/upload-artifact@v3
      with:
        name: sast-reports
        path: |
          bandit-report.json
          semgrep-report.json
        retention-days: 30

  # Container image scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t flask-api-template:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-api-template:security-scan'
        format: 'json'
        output: 'trivy-report.json'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'flask-api-template:security-scan'
        output-format: json
        output-file: grype-report.json

    - name: Upload container scan reports
      uses: actions/upload-artifact@v3
      with:
        name: container-scan-reports
        path: |
          trivy-report.json
          grype-report.json
        retention-days: 30

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements/base.txt

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=csv --output-file=licenses.csv

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.csv
        retention-days: 90

  # Create security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-scan, license-check]
    if: always()

    steps:
    - name: Download all reports
      uses: actions/download-artifact@v3

    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md

        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md

        # Add more detailed analysis if reports exist
        if [ -f "security-reports/safety-report.json" ]; then
          echo "" >> security-summary.md
          echo "## Dependency Vulnerabilities" >> security-summary.md
          echo "See safety-report.json for details" >> security-summary.md
        fi

        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90
